// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce_elevate/test/features/home/tabs/home/view_model/home_tab_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

// ðŸŽ¯ Dart imports:
import 'dart:async' as _i9;
import 'dart:ui' as _i10;

// ðŸ“¦ Package imports:
import 'package:geocode/src/geocode.dart' as _i11;
import 'package:geocode/src/model/address.dart' as _i3;
import 'package:geocode/src/model/coordinates.dart' as _i4;
import 'package:location/location.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

import 'package:ecommerce_elevate/core/datasource_execution/results.dart'
    as _i14;
import 'package:ecommerce_elevate/features/home/domain/entities/category/category.dart'
    as _i15;
import 'package:ecommerce_elevate/features/home/domain/entities/occasions/occasion.dart'
    as _i17;
import 'package:ecommerce_elevate/features/home/domain/entities/products/product.dart'
    as _i19;
import 'package:ecommerce_elevate/features/home/domain/repository/categories_repository.dart'
    as _i5;
import 'package:ecommerce_elevate/features/home/domain/repository/occasions_repository.dart'
    as _i6;
import 'package:ecommerce_elevate/features/home/domain/repository/products_repository.dart'
    as _i7;
import 'package:ecommerce_elevate/features/home/domain/use_case/get_categories_list_use_case.dart'
    as _i13;
import 'package:ecommerce_elevate/features/home/domain/use_case/get_most_selling_products_list_use_case.dart'
    as _i18;
import 'package:ecommerce_elevate/features/home/domain/use_case/get_occasions_list_use_case.dart'
    as _i16;
import 'package:location_platform_interface/location_platform_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationData_0 extends _i1.SmartFake implements _i2.LocationData {
  _FakeLocationData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddress_1 extends _i1.SmartFake implements _i3.Address {
  _FakeAddress_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoordinates_2 extends _i1.SmartFake implements _i4.Coordinates {
  _FakeCoordinates_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoriesRepository_3 extends _i1.SmartFake
    implements _i5.CategoriesRepository {
  _FakeCategoriesRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOccasionsRepository_4 extends _i1.SmartFake
    implements _i6.OccasionsRepository {
  _FakeOccasionsRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductsRepository_5 extends _i1.SmartFake
    implements _i7.ProductsRepository {
  _FakeProductsRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i8.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i2.LocationData> get onLocationChanged => (super.noSuchMethod(
        Invocation.getter(#onLocationChanged),
        returnValue: _i9.Stream<_i2.LocationData>.empty(),
      ) as _i9.Stream<_i2.LocationData>);

  @override
  _i9.Future<bool> changeSettings({
    _i2.LocationAccuracy? accuracy = _i2.LocationAccuracy.high,
    int? interval = 1000,
    double? distanceFilter = 0.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeSettings,
          [],
          {
            #accuracy: accuracy,
            #interval: interval,
            #distanceFilter: distanceFilter,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> isBackgroundModeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isBackgroundModeEnabled,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> enableBackgroundMode({bool? enable = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableBackgroundMode,
          [],
          {#enable: enable},
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<_i2.LocationData> getLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i9.Future<_i2.LocationData>.value(_FakeLocationData_0(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
      ) as _i9.Future<_i2.LocationData>);

  @override
  _i9.Future<_i2.PermissionStatus> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i9.Future<_i2.PermissionStatus>.value(
            _i2.PermissionStatus.granted),
      ) as _i9.Future<_i2.PermissionStatus>);

  @override
  _i9.Future<_i2.PermissionStatus> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i9.Future<_i2.PermissionStatus>.value(
            _i2.PermissionStatus.granted),
      ) as _i9.Future<_i2.PermissionStatus>);

  @override
  _i9.Future<bool> serviceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #serviceEnabled,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> requestService() => (super.noSuchMethod(
        Invocation.method(
          #requestService,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<_i2.AndroidNotificationData?> changeNotificationOptions({
    String? channelName,
    String? title,
    String? iconName,
    String? subtitle,
    String? description,
    _i10.Color? color,
    bool? onTapBringToFront,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeNotificationOptions,
          [],
          {
            #channelName: channelName,
            #title: title,
            #iconName: iconName,
            #subtitle: subtitle,
            #description: description,
            #color: color,
            #onTapBringToFront: onTapBringToFront,
          },
        ),
        returnValue: _i9.Future<_i2.AndroidNotificationData?>.value(),
      ) as _i9.Future<_i2.AndroidNotificationData?>);
}

/// A class which mocks [GeoCode].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeoCode extends _i1.Mock implements _i11.GeoCode {
  MockGeoCode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i9.Future<_i3.Address> reverseGeocoding({
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reverseGeocoding,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i9.Future<_i3.Address>.value(_FakeAddress_1(
          this,
          Invocation.method(
            #reverseGeocoding,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
            },
          ),
        )),
      ) as _i9.Future<_i3.Address>);

  @override
  _i9.Future<_i4.Coordinates> forwardGeocoding({required String? address}) =>
      (super.noSuchMethod(
        Invocation.method(
          #forwardGeocoding,
          [],
          {#address: address},
        ),
        returnValue: _i9.Future<_i4.Coordinates>.value(_FakeCoordinates_2(
          this,
          Invocation.method(
            #forwardGeocoding,
            [],
            {#address: address},
          ),
        )),
      ) as _i9.Future<_i4.Coordinates>);
}

/// A class which mocks [GetCategoriesListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoriesListUseCase extends _i1.Mock
    implements _i13.GetCategoriesListUseCase {
  MockGetCategoriesListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CategoriesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriesRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.CategoriesRepository);

  @override
  set repository(_i5.CategoriesRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i14.Results<List<_i15.Category>?>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i9.Future<_i14.Results<List<_i15.Category>?>>.value(
            _i12.dummyValue<_i14.Results<List<_i15.Category>?>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i9.Future<_i14.Results<List<_i15.Category>?>>);
}

/// A class which mocks [GetOccasionsListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOccasionsListUseCase extends _i1.Mock
    implements _i16.GetOccasionsListUseCase {
  MockGetOccasionsListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.OccasionsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeOccasionsRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.OccasionsRepository);

  @override
  set repository(_i6.OccasionsRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i14.Results<List<_i17.Occasion>?>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i9.Future<_i14.Results<List<_i17.Occasion>?>>.value(
            _i12.dummyValue<_i14.Results<List<_i17.Occasion>?>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i9.Future<_i14.Results<List<_i17.Occasion>?>>);
}

/// A class which mocks [GetMostSellingProductsListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMostSellingProductsListUseCase extends _i1.Mock
    implements _i18.GetMostSellingProductsListUseCase {
  MockGetMostSellingProductsListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ProductsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductsRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.ProductsRepository);

  @override
  set repository(_i7.ProductsRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i14.Results<List<_i19.Product>?>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i9.Future<_i14.Results<List<_i19.Product>?>>.value(
            _i12.dummyValue<_i14.Results<List<_i19.Product>?>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i9.Future<_i14.Results<List<_i19.Product>?>>);
}
